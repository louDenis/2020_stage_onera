<launch>
    <!-- Camera position and orientation are represented by base_link -> main_camera_optical transform -->
    <!-- static_transform_publisher arguments: x y z yaw pitch roll frame_id child_frame_id -->

    <!-- article about camera setup: https://clever.copterexpress.com/camera_frame.html -->

    <!-- camera is oriented downward, camera cable goes backward [option 1] -->
    <node pkg="tf2_ros" type="static_transform_publisher" name="main_camera_frame" args="0.05 0 -0.07 -1.5707963 0 3.1415926 base_link main_camera_optical"/>

    <!-- camera is oriented downward, camera cable goes forward  [option 2] -->
    <!--<node pkg="tf2_ros" type="static_transform_publisher" name="main_camera_frame" args="0.05 0 -0.07 1.5707963 0 3.1415926 base_link main_camera_optical"/>-->

    <!-- camera is oriented upward, camera cable goes backward   [option 3] -->
    <!--<node pkg="tf2_ros" type="static_transform_publisher" name="main_camera_frame" args="0.05 0 0.07 1.5707963 0 0 base_link main_camera_optical"/>-->

    <!-- camera is oriented upward, camera cable goes forward    [option 4] -->
    <!--<node pkg="tf2_ros" type="static_transform_publisher" name="main_camera_frame" args="0.05 0 0.07 -1.5707963 0 0 base_link main_camera_optical"/>-->

    <!-- camera node -->

    <node pkg="jetson_camera" type="jetson_camera_node" name="back_camera" clear_params="true" output="screen">
	<remap from="camera" to="back" />
        <param name="cap_width" value="1280"/>
        <param name="cap_height" value="720"/>
        <param name="width" value="640"/>
        <param name="height" value="480"/>
        <param name="fps" value="60"/>
        <param name="flip_method" value="2"/>
        <param name="sensor_id" value="1"/>

        <param name="frame_id" value="back_camera_optical"/>
        <param name="camera_info_url" value="file://$(find jetson_camera)/camera_info/back.yaml"/>
    </node>


    <group ns="front_camera">
	<node pkg="stage_lou" name="premier_noued" type="premier_noeud_image.py" output="screen">
		<remap from="/front_camera/image_raw" to="/front_camera/image_rect_color" />
		<remap from="/detectnet/detections" to="/front_camera/detect_front/detections" />
	</node>
	<node pkg="image_proc" type="image_proc" name="front_image_proc" />
	<node pkg="ros_deep_learning" type="detectnet" name="detect_front" >
		<param name="~model_name" value="pednet" />
		<remap from="/front_camera/detect_front/image_in" to="/front_camera/image_rect_color" />
	</node>
	<node pkg="stage_lou" name="second_noeud" type="save_image.py" output="screen"/>

    
        <node pkg="stage_lou" name="troisieme_noeud" type="find_angle.py" output="screen">
          <remap from="/detectnet/detections" to="/front_camera/detect_front/detections" />
	</node>

    </group>
    <node pkg="jetson_camera" type="jetson_camera_node" name="front_camera" clear_params="true" output="screen">
	<remap from="camera" to="front" />
	<remap from="/front_camera/image_raw" to="/front_camera/image_orig" />
        <param name="cap_width" value="1280"/>
        <param name="cap_height" value="720"/>
        <param name="width" value="640"/>
        <param name="height" value="480"/>
        <param name="fps" value="59"/>
        <param name="flip_method" value="2"/>
        <param name="sensor_id" value="0"/>

        <param name="frame_id" value="front_camera_optical"/>
        <param name="camera_info_url" value="file://$(find jetson_camera)/camera_info/front.yaml"/>
    </node>

<arg name="model" default="burger" doc="model type [burger, waffle, waffle_pi]"/>
  <arg name="multi_robot_name" default="guiness"/>

  <arg name="set_lidar_frame_id" default="base_scan"/>

  <include file="$(find turtlebot3_bringup)/launch/turtlebot3_core.launch">
    <arg name="multi_robot_name" value="$(arg multi_robot_name)"/>
  </include>
  <include file="$(find turtlebot3_bringup)/launch/turtlebot3_lidar.launch">
    <arg name="set_frame_id" value="$(arg set_lidar_frame_id)"/>
  </include>

  <include file="$(find teleop_twist_joy)/launch/teleop.launch"/>

</launch>
